class Solution
{   
    public:
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    vector<int> boundaryTraversal(vector<vector<int> > matrix, int n, int m) 
    {
        // code here
        //n = no of rows 
        //m is no of columns
        vector<int> V;
        //cornor case for one row
        if(n==1){
            for(int i=0; i<m; i++){
                V.push_back(matrix[0][i]);
            }
            return V;
        }
        if(m==1){
             for(int i=0; i<n; i++){
                V.push_back(matrix[i][0]);
            }
            return V;
        }
        else{
            
            //for 1st row that is 1 to 4
            for(int i =0; i<m; i++){
                V.push_back(matrix[0][i]);
            }
            //for last columm that is 8 to 16
            for(int i =1; i<n; i++){
                V.push_back(matrix[i][m-1]);
                //matrix[1][3]  8
                //matrix[2][3]  12
                //matrix[3][3]  16
                
            }
            for(int i =m-2; i>=0; i--){
                V.push_back(matrix[n-1][i]);//row is fixed 
                //matrix[3][2]   15
                //matrix[3][1]   14
                //matrix[3][0]   13
            }
            for(int i=n-2; i>=1 ; i--)//col is fixed row is decrementing backward
            {
                V.push_back(matrix[i][0]);
                //matrix[2][0]  9
                //matrix[1][0]  5
            }
            
            
        }
        
        return V;
    }
};
