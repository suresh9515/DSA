
class Solution {
public:
    int bestClosingTime(string customers) {
        int max_score = 0, score = 0, right_time = -1;
        for(int i = 0; i < customers.size(); ++i) {
            score += (customers[i] == 'Y') ? 1 : -1;
            if(score > max_score) {
                max_score = score;
                right_time = i;
            }
        }
        return right_time + 1;
    }
};



























// class Solution {
// public:
//     int bestClosingTime(string customers) {
//          int count =0;
//          int Ancount=0;
//          int n =customers.length();
//         for(int i=0; i<n; i++){
           
//             if(customers[i]=='Y'){
//                 count++;
//             }
//             if(customers[i]=='N'){
//                 Ancount++;
//             }

//         }
//         if(count == n ){
//            return count;
//         }
//         if(Ancount == n){
//             return 0;
//         }
//        //here scoring algoritm is if it finds Y then +1 ortherwise -1
//        int score =0;
//        int right_time=-1;int maximum_score=0;
//        for(int i =0; i<n; i++){
//            if(customers[i]='Y'){
//                score =score + 1;
//            }else{
//                score = score -1;
//            }
//            if(score > maximum_score){
//                maximum_score = score;
//                right_time = i;
//            }
//        }
       
//        return right_time+1;
//     }
// };